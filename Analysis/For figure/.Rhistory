DGN_TCR == 4108 ~ 1,
DGN_TCR == 4100 ~ 1,
DGN_TCR == 4520 ~ 1,
DGN2_TCR == 4110 ~ 1,
DGN2_TCR == 4101 ~ 1,
DGN2_TCR == 4102 ~ 1,
DGN2_TCR == 4103 ~ 1,
DGN2_TCR == 4104 ~ 1,
DGN2_TCR == 4105 ~ 1,
DGN2_TCR == 4106 ~ 1,
DGN2_TCR == 4107 ~ 1,
DGN2_TCR == 4106 ~ 1,
DGN2_TCR == 4108 ~ 1,
DGN2_TCR == 4100 ~ 1,
DGN2_TCR == 4520 ~ 1,
TRUE ~ 0
)
)
# Chunk 9
unosdata2 <- unosdata2 %>% filter(ALF_listing == 0)
nrow(unosdata2)
unosdata2 <- unosdata2 %>% filter(Status_1A == 0)
nrow(unosdata2)
#Remove washout period
unosdata2 <- unosdata2 %>% filter(POST_NAMELD_LISTING == 1 | POST_NAMELD_LISTING == 0)
nrow(unosdata2)
# Chunk 10
unosdata2 <- unosdata2 %>%
mutate(GENDER = factor(GENDER, labels = c("Female", "Male"))) %>%
mutate(FUNC_STAT_TCR_Recoded = factor(FUNC_STAT_TCR_Recoded, labels = c("10-30%", "40-100%"))) %>%
mutate(END_BMI_WHOgroups = factor(END_BMI_WHOgroups, labels=c("18.5-24.9", "25-29.9", "30-34.9", "35-39.9", ">40", "<18.5"))) %>%
mutate(Diabetes_yes = factor(Diabetes_yes, labels=c("No", "Yes"))) %>%
mutate(INIT_LIFE_SUPP_01 = factor(INIT_LIFE_SUPP_01, labels=c("No", "Yes"))) %>%
mutate(FINAL_Sodium_groups = factor(FINAL_Sodium_groups, labels = c("135-145", "130-134", "125-129", "<124", ">145"))) %>%
mutate(Hyponatremiaclassification = factor(Hyponatremiaclassification, labels = c("135-145", "130-134", "125-129", "121-124", "≤120", ">145"))) %>%
mutate(Hyponatremiaclassification_listing = factor(Hyponatremiaclassification_listing, labels = c("135-145", "130-134", "125-129", "121-124", "≤120", ">145"))) %>%
mutate(INIT_DIALYSIS_PRIOR_WEEK = factor(INIT_DIALYSIS_PRIOR_WEEK, labels=c("No", "Yes"))) %>%
mutate(HCC = factor(HCC, labels = c("No", "Yes"))) %>%
mutate(EXCEPTION01 = factor(EXCEPTION01, labels = c("No", "Yes")))
# Chunk 11
unosdata2 <- unosdata2 %>% filter(ALF_listing == 0 | Status_1A == 0)
preMELD <- unosdata2 %>% filter(POST_NAMELD_LISTING == 0)
postMELD <- unosdata2 %>% filter(POST_NAMELD_LISTING == 1)
extremehypo <- unosdata2 %>% filter(Extremehypo_listing == "Na≤120")
normalsodium <- unosdata2 %>% filter(Hyponatremiaclassification_listing == "135-145")
hyponatremia <- unosdata2 %>% filter(Hyponatremiaclassification_listing == "120-124")
# Chunk 12
tab1 <- tableby(POST_NAMELD_LISTING ~
Hyponatremiaclassification_listing +
GENDER +
AGE +
#Status_1A +
INIT_MELD_PELD_LAB_SCORE +
DAYSWAIT_CHRON +
HCC +
MALIGNANT +
ALD +
HCV +
NASH +
BILIARY +
includeNA(Diabetes_yes) +
Diabetes_yes +
includeNA(FUNC_STAT_TCR_Recoded) +
FUNC_STAT_TCR_Recoded +
TIPSS_TCR +
includeNA(INIT_DIALYSIS_PRIOR_WEEK) +
INIT_DIALYSIS_PRIOR_WEEK +
HCC +
PTIME +
LOS +
BMI_CALC +
INIT_SERUM_CREAT +
EXCEPTION01 +
includeNA(INIT_LIFE_SUPP_01) +
INIT_LIFE_SUPP_01,
data=unosdata2, test=TRUE, total=TRUE,
numeric.stats=c("medianq1q3"), numeric.test="kwt", cat.test="chisq")
summary(tab1, title='Patient characteristics overall', pfootnote=TRUE, digits = 2)
# Chunk 13
library(cmprsk)
"CumIncidence" <- function(ftime, fstatus, group, t, strata, rho = 0,
cencode = 0, subset, na.action = na.omit, level,
xlab = "Time", ylab = "Probability",
col, lty, lwd, digits = 4)
{
# check for the required package
if(!require("cmprsk"))
{ stop("Package `cmprsk' is required and must be installed.\n
See help(install.packages) or write the following command at prompt
and then follow the instructions:\n
> install.packages(\"cmprsk\")") }
# collect data
mf  <- match.call(expand.dots = FALSE)
mf[[1]] <- as.name("list")
mf$t <- mf$digits <- mf$col <- mf$lty <- mf$lwd <- mf$level <-
mf$xlab <- mf$ylab <- NULL
mf <- eval(mf, parent.frame())
g <- max(1, length(unique(mf$group)))
s <- length(unique(mf$fstatus))
if(missing(t))
{ time <- pretty(c(0, max(mf$ftime)), 6)
ttime <- time <- time[time < max(mf$ftime)] }
else { ttime <- time <- t }
# fit model and estimates at time points
fit   <- do.call("cuminc", mf)
tfit <- timepoints(fit, time)
# print result
cat("\n+", paste(rep("-", 67), collapse=""), "+", sep ="")
cat("\n| Cumulative incidence function estimates from competing risks data |")
cat("\n+", paste(rep("-", 67), collapse=""), "+\n", sep ="")
tests <- NULL
if(g > 1)
{
tests <- data.frame(fit$Tests[,c(1,3,2)], check.names = FALSE)
colnames(tests) <- c("Statistic", "df", "p-value")
tests$`p-value` <- format.pval(tests$`p-value`)
cat("Test equality across groups:\n")
print(tests, digits = digits)
}
cat("\nEstimates at time points:\n")
print(tfit$est, digits = digits)
cat("\nStandard errors:\n")
print(sqrt(tfit$var), digits = digits)
#
if(missing(level))
{ # plot cumulative incidence functions
if(missing(t))
{ time <- sort(unique(c(ftime, time)))
x <- timepoints(fit, time) }
else x <- tfit
col <- if(missing(col)) rep(1:(s-1), rep(g,(s-1))) else col
lty <- if(missing(lty)) rep(1:g, s-1) else lty
lwd <- if(missing(lwd)) rep(1, g*(s-1)) else lwd
matplot(time, base::t(x$est), type="s", ylim = c(0,1),
xlab = xlab, ylab = ylab, xaxs="i", yaxs="i",
col = col, lty = lty, lwd = lwd)
legend("topleft", legend =  rownames(x$est), x.intersp = 2,
bty = "n", xjust = 1, col = col, lty = lty, lwd = lwd)
out <- list(test = tests, est = tfit$est, se = sqrt(tfit$var))
}
else
{ if(level < 0 | level > 1)
error("level must be a value in the range [0,1]")
# compute pointwise confidence intervals
oldpar <- par(ask=TRUE)
on.exit(par(oldpar))
if(missing(t))
{ time <- sort(unique(c(ftime, time)))
x <- timepoints(fit, time) }
else x <- tfit
z <- qnorm(1-(1-level)/2)
lower <- x$est ^ exp(-z*sqrt(x$var)/(x$est*log(x$est)))
upper <- x$est ^ exp(z*sqrt(x$var)/(x$est*log(x$est)))
col <- if(missing(col)) rep(1:(s-1), rep(g,(s-1)))
else             rep(col, g*(s-1))
lwd <- if(missing(lwd)) rep(1, g*(s-1))
else             rep(lwd, g*(s-1))
# plot pointwise confidence intervals
for(j in 1:nrow(x$est))
{ matplot(time, cbind(x$est[j,], lower[j,], upper[j,]), type="s",
xlab = xlab, ylab = ylab, xaxs="i", yaxs="i",
ylim = c(0,1), col = col[j], lwd = lwd[j], lty = c(1,3,3))
legend("topleft", legend =  rownames(x$est)[j], bty = "n", xjust = 1) }
# print pointwise confidence intervals
i <- match(ttime, time)
ci <- array(NA, c(2, length(i), nrow(lower)))
ci[1,,] <- base::t(lower[,i])
ci[2,,] <- base::t(upper[,i])
dimnames(ci) <- list(c("lower", "upper"), ttime, rownames(lower))
cat(paste("\n", level*100, "% pointwise confidence intervals:\n\n", sep=""))
print(ci, digits = digits)
out <- list(test = tests, est = x$est, se = sqrt(tfit$var), ci = ci)
}
# return results
invisible(out)
}
#Death or too sick
"CumIncidenceDeathortoosick" <- function(ftime, fstatus, group, t, strata, rho = 0,
cencode = 0, subset, na.action = na.omit, level,
xlab = "Time", ylab = "Probability",
col, lty, lwd, digits = 4)
{
# check for the required package
if(!require("cmprsk"))
{ stop("Package `cmprsk' is required and must be installed.\n
See help(install.packages) or write the following command at prompt
and then follow the instructions:\n
> install.packages(\"cmprsk\")") }
# collect data
mf  <- match.call(expand.dots = FALSE)
mf[[1]] <- as.name("list")
mf$t <- mf$digits <- mf$col <- mf$lty <- mf$lwd <- mf$level <-
mf$xlab <- mf$ylab <- NULL
mf <- eval(mf, parent.frame())
g <- max(1, length(unique(mf$group)))
s <- length(unique(mf$fstatus))
if(missing(t))
{ time <- pretty(c(0, max(mf$ftime)), 6)
ttime <- time <- time[time < max(mf$ftime)] }
else { ttime <- time <- t }
# fit model and estimates at time points
fit   <- do.call("cuminc", mf)
tfit <- timepoints(fit, time)
# print result
cat("\n+", paste(rep("-", 67), collapse=""), "+", sep ="")
cat("\n| Cumulative incidence function estimates from competing risks data |")
cat("\n+", paste(rep("-", 67), collapse=""), "+\n", sep ="")
tests <- NULL
if(g > 1)
{
tests <- data.frame(fit$Tests[,c(1,3,2)], check.names = FALSE)
colnames(tests) <- c("Statistic", "df", "p-value")
tests$`p-value` <- format.pval(tests$`p-value`)
cat("Test equality across groups:\n")
print(tests, digits = digits)
}
cat("\nEstimates at time points:\n")
print(tfit$est, digits = digits)
cat("\nStandard errors:\n")
print(sqrt(tfit$var), digits = digits)
#
if(missing(level))
{ # plot cumulative incidence functions
if(missing(t))
{ time <- sort(unique(c(ftime, time)))
x <- timepoints(fit, time) }
else x <- tfit
col <- if(missing(col)) rep(1:(s-1), rep(g,(s-1))) else col
lty <- if(missing(lty)) rep(1:g, s-1) else lty
lwd <- if(missing(lwd)) rep(1, g*(s-1)) else lwd
matplot(time, base::t(x$est)[,3:4], type="s", ylim = c(0,1),
xlab = xlab, ylab = ylab, xaxs="i", yaxs="i",
col = col, lty = lty, lwd = lwd)
legend("topleft", legend =  rownames(x$est)[3:4], x.intersp = 2,
bty = "n", xjust = 1, col = col, lty = lty, lwd = lwd)
out <- list(test = tests, est = tfit$est, se = sqrt(tfit$var))
}
else
{ if(level < 0 | level > 1)
error("level must be a value in the range [0,1]")
# compute pointwise confidence intervals
oldpar <- par(ask=TRUE)
on.exit(par(oldpar))
if(missing(t))
{ time <- sort(unique(c(ftime, time)))
x <- timepoints(fit, time) }
else x <- tfit
z <- qnorm(1-(1-level)/2)
lower <- x$est ^ exp(-z*sqrt(x$var)/(x$est*log(x$est)))
upper <- x$est ^ exp(z*sqrt(x$var)/(x$est*log(x$est)))
col <- if(missing(col)) rep(1:(s-1), rep(g,(s-1)))
else             rep(col, g*(s-1))
lwd <- if(missing(lwd)) rep(1, g*(s-1))
else             rep(lwd, g*(s-1))
# plot pointwise confidence intervals
for(j in 1:nrow(x$est))
{ matplot(time, cbind(x$est[j,], lower[j,], upper[j,]), type="s",
xlab = xlab, ylab = ylab, xaxs="i", yaxs="i",
ylim = c(0,1), col = col[j], lwd = lwd[j], lty = c(1,3,3))
legend("topleft", legend =  rownames(x$est)[j], bty = "n", xjust = 1) }
# print pointwise confidence intervals
i <- match(ttime, time)
ci <- array(NA, c(2, length(i), nrow(lower)))
ci[1,,] <- base::t(lower[,i])
ci[2,,] <- base::t(upper[,i])
dimnames(ci) <- list(c("lower", "upper"), ttime, rownames(lower))
cat(paste("\n", level*100, "% pointwise confidence intervals:\n\n", sep=""))
print(ci, digits = digits)
out <- list(test = tests, est = x$est, se = sqrt(tfit$var), ci = ci)
}
# return results
invisible(out)
}
#Transplanted
"CumIncidenceTransplanted" <- function(ftime, fstatus, group, t, strata, rho = 0,
cencode = 0, subset, na.action = na.omit, level,
xlab = "Time", ylab = "Probability",
col, lty, lwd, digits = 4)
{
# check for the required package
if(!require("cmprsk"))
{ stop("Package `cmprsk' is required and must be installed.\n
See help(install.packages) or write the following command at prompt
and then follow the instructions:\n
> install.packages(\"cmprsk\")") }
# collect data
mf  <- match.call(expand.dots = FALSE)
mf[[1]] <- as.name("list")
mf$t <- mf$digits <- mf$col <- mf$lty <- mf$lwd <- mf$level <-
mf$xlab <- mf$ylab <- NULL
mf <- eval(mf, parent.frame())
g <- max(1, length(unique(mf$group)))
s <- length(unique(mf$fstatus))
if(missing(t))
{ time <- pretty(c(0, max(mf$ftime)), 6)
ttime <- time <- time[time < max(mf$ftime)] }
else { ttime <- time <- t }
# fit model and estimates at time points
fit   <- do.call("cuminc", mf)
tfit <- timepoints(fit, time)
# print result
cat("\n+", paste(rep("-", 67), collapse=""), "+", sep ="")
cat("\n| Cumulative incidence function estimates from competing risks data |")
cat("\n+", paste(rep("-", 67), collapse=""), "+\n", sep ="")
tests <- NULL
if(g > 1)
{
tests <- data.frame(fit$Tests[,c(1,3,2)], check.names = FALSE)
colnames(tests) <- c("Statistic", "df", "p-value")
tests$`p-value` <- format.pval(tests$`p-value`)
cat("Test equality across groups:\n")
print(tests, digits = digits)
}
cat("\nEstimates at time points:\n")
print(tfit$est, digits = digits)
cat("\nStandard errors:\n")
print(sqrt(tfit$var), digits = digits)
#
if(missing(level))
{ # plot cumulative incidence functions
if(missing(t))
{ time <- sort(unique(c(ftime, time)))
x <- timepoints(fit, time) }
else x <- tfit
col <- if(missing(col)) rep(1:(s-1), rep(g,(s-1))) else col
lty <- if(missing(lty)) rep(1:g, s-1) else lty
lwd <- if(missing(lwd)) rep(1, g*(s-1)) else lwd
matplot(time, base::t(x$est)[,5:6], type="s", ylim = c(0,1),
xlab = xlab, ylab = ylab, xaxs="i", yaxs="i",
col = col, lty = lty, lwd = lwd)
legend("topleft", legend =  rownames(x$est)[5:6], x.intersp = 2,
bty = "n", xjust = 1, col = col, lty = lty, lwd = lwd)
out <- list(test = tests, est = tfit$est, se = sqrt(tfit$var))
}
else
{ if(level < 0 | level > 1)
error("level must be a value in the range [0,1]")
# compute pointwise confidence intervals
oldpar <- par(ask=TRUE)
on.exit(par(oldpar))
if(missing(t))
{ time <- sort(unique(c(ftime, time)))
x <- timepoints(fit, time) }
else x <- tfit
z <- qnorm(1-(1-level)/2)
lower <- x$est ^ exp(-z*sqrt(x$var)/(x$est*log(x$est)))
upper <- x$est ^ exp(z*sqrt(x$var)/(x$est*log(x$est)))
col <- if(missing(col)) rep(1:(s-1), rep(g,(s-1)))
else             rep(col, g*(s-1))
lwd <- if(missing(lwd)) rep(1, g*(s-1))
else             rep(lwd, g*(s-1))
# plot pointwise confidence intervals
for(j in 1:nrow(x$est))
{ matplot(time, cbind(x$est[j,], lower[j,], upper[j,]), type="s",
xlab = xlab, ylab = ylab, xaxs="i", yaxs="i",
ylim = c(0,1), col = col[j], lwd = lwd[j], lty = c(1,3,3))
legend("topleft", legend =  rownames(x$est)[j], bty = "n", xjust = 1) }
# print pointwise confidence intervals
i <- match(ttime, time)
ci <- array(NA, c(2, length(i), nrow(lower)))
ci[1,,] <- base::t(lower[,i])
ci[2,,] <- base::t(upper[,i])
dimnames(ci) <- list(c("lower", "upper"), ttime, rownames(lower))
cat(paste("\n", level*100, "% pointwise confidence intervals:\n\n", sep=""))
print(ci, digits = digits)
out <- list(test = tests, est = x$est, se = sqrt(tfit$var), ci = ci)
}
# return results
invisible(out)
}
# Chunk 14
attach(unosdata2)
#90 days in the overall group
fit1 <- CumIncidenceDeathortoosick(DAYSWAIT_CHRON90, REM_CD_90, Extremehypo_listing, cencode = 0, xlab="Days")
fit1 <- CumIncidenceTransplanted(DAYSWAIT_CHRON90, REM_CD_90, Extremehypo_listing, cencode = 0, xlab="Days")
fit3 <- CumIncidence(DAYSWAIT_CHRON90, REM_CD_90, Extremehypo_listing, cencode = 0, xlab="Days")
#180 days in the overall group
fit1 <- CumIncidenceDeathortoosick(DAYSWAIT_CHRON180, REM_CD_180, Extremehypo_listing, cencode = 0, xlab="Days")
fit1 <- CumIncidenceTransplanted(DAYSWAIT_CHRON180, REM_CD_180, Extremehypo_listing, cencode = 0, xlab="Days")
fit3 <- CumIncidence(DAYSWAIT_CHRON180, REM_CD_180, Extremehypo_listing, cencode = 0, xlab="Days")
#365 days in the overall group
fit1 <- CumIncidenceDeathortoosick(DAYSWAIT_CHRON365, REM_CD_365, Extremehypo_listing, cencode = 0, xlab="Days")
fit1 <- CumIncidenceTransplanted(DAYSWAIT_CHRON365, REM_CD_365, Extremehypo_listing, cencode = 0, xlab="Days")
fit3 <- CumIncidence(DAYSWAIT_CHRON365, REM_CD_365, Extremehypo_listing, cencode = 0, xlab="Days")
attach(preMELD)
#90 days in the preMELD-Na era
fit1 <- CumIncidenceDeathortoosick(DAYSWAIT_CHRON90, REM_CD_90, Extremehypo_listing, cencode = 0, xlab="Days")
fit1 <- CumIncidenceTransplanted(DAYSWAIT_CHRON90, REM_CD_90, Extremehypo_listing, cencode = 0, xlab="Days")
fit3 <- CumIncidence(DAYSWAIT_CHRON90, REM_CD_90, Extremehypo_listing, cencode = 0, xlab="Days")
#180 days in the preMELD-Na era
fit1 <- CumIncidenceDeathortoosick(DAYSWAIT_CHRON180, REM_CD_180, Extremehypo_listing, cencode = 0, xlab="Days")
fit1 <- CumIncidenceTransplanted(DAYSWAIT_CHRON180, REM_CD_180, Extremehypo_listing, cencode = 0, xlab="Days")
fit3 <- CumIncidence(DAYSWAIT_CHRON180, REM_CD_180, Extremehypo_listing, cencode = 0, xlab="Days")
#365 days in the preMELD-Na era
fit1 <- CumIncidenceDeathortoosick(DAYSWAIT_CHRON365, REM_CD_365, Extremehypo_listing, cencode = 0, xlab="Days")
fit1 <- CumIncidenceTransplanted(DAYSWAIT_CHRON365, REM_CD_365, Extremehypo_listing, cencode = 0, xlab="Days")
fit3 <- CumIncidence(DAYSWAIT_CHRON365, REM_CD_365, Extremehypo_listing, cencode = 0, xlab="Days")
attach(postMELD)
#90 days in the postMELD-Na era
fit1 <- CumIncidenceDeathortoosick(DAYSWAIT_CHRON90, REM_CD_90, Extremehypo_listing, cencode = 0, xlab="Days")
fit1 <- CumIncidenceTransplanted(DAYSWAIT_CHRON90, REM_CD_90, Extremehypo_listing, cencode = 0, xlab="Days")
fit3 <- CumIncidence(DAYSWAIT_CHRON90, REM_CD_90, Extremehypo_listing, cencode = 0, xlab="Days")
#180 days in the postMELD-Na era
fit1 <- CumIncidenceDeathortoosick(DAYSWAIT_CHRON180, REM_CD_180, Extremehypo_listing, cencode = 0, xlab="Days")
fit1 <- CumIncidenceTransplanted(DAYSWAIT_CHRON180, REM_CD_180, Extremehypo_listing, cencode = 0, xlab="Days")
fit3 <- CumIncidence(DAYSWAIT_CHRON180, REM_CD_180, Extremehypo_listing, cencode = 0, xlab="Days")
#365 days in the postMELD-Na era
fit1 <- CumIncidenceDeathortoosick(DAYSWAIT_CHRON365, REM_CD_365, Extremehypo_listing, cencode = 0, xlab="Days")
fit1 <- CumIncidenceTransplanted(DAYSWAIT_CHRON365, REM_CD_365, Extremehypo_listing, cencode = 0, xlab="Days")
fit3 <- CumIncidence(DAYSWAIT_CHRON365, REM_CD_365, Extremehypo_listing, cencode = 0, xlab="Days")
#fit3 <- CumIncidence(DAYSWAIT_CHRON365, REM_CD_365, Extremehypo_listing, cencode = 0, xlab="Days",
#                    t= c(0, 90, 180, 270, 365, level= 0.95))
#extremehypo <- extremehypo %>% mutate(POST_NAMELD_LISTING = factor(POST_NAMELD_LISTING, labels = c("Pre-MELD-Na:", "Post-MELD-Na:")))
attach(extremehypo)
#Extreme hypo patients pre and post 90 days 1 is postmeld
fit1 <- CumIncidenceDeathortoosick(DAYSWAIT_CHRON90, REM_CD_90, POST_NAMELD_LISTING, cencode = 0, xlab="Days")
fit1 <- CumIncidenceTransplanted(DAYSWAIT_CHRON90, REM_CD_90, POST_NAMELD_LISTING, cencode = 0, xlab="Days")
fit1 <- CumIncidence(DAYSWAIT_CHRON90, REM_CD_90, POST_NAMELD_LISTING, cencode = 0, xlab="Days")
#Extreme hypo patients pre and post 180 days 1 is postmeld
fit1 <- CumIncidenceDeathortoosick(DAYSWAIT_CHRON180, REM_CD_180, POST_NAMELD_LISTING, cencode = 0, xlab="Days")
fit1 <- CumIncidenceTransplanted(DAYSWAIT_CHRON180, REM_CD_180, POST_NAMELD_LISTING, cencode = 0, xlab="Days")
fit1 <- CumIncidence(DAYSWAIT_CHRON180, REM_CD_180, POST_NAMELD_LISTING, cencode = 0, xlab="Days")
#Extreme hypo patients pre and post 365 days 1 is postmeld
fit1 <- CumIncidenceDeathortoosick(DAYSWAIT_CHRON365, REM_CD_365, POST_NAMELD_LISTING, cencode = 0, xlab="Days")
fit1 <- CumIncidenceTransplanted(DAYSWAIT_CHRON365, REM_CD_365, POST_NAMELD_LISTING, cencode = 0, xlab="Days")
fit1 <- CumIncidence(DAYSWAIT_CHRON365, REM_CD_365, POST_NAMELD_LISTING, cencode = 0, xlab="Days")
library(Rcmdr)
#Figure 2a (WAITLIST)
#####Cumulative incidence of competing events and Gray test#####
DummyEventForCI <- preMELD$REM_CD_90
DummyEventForCI <- as.factor(DummyEventForCI)
#Required for Surv() with mstate option
res <- NULL
ci <- NULL
ci.summary.table <- NULL
ci <- survfit(Surv((DAYSWAIT_CHRON90/1), DummyEventForCI,
type="mstate")~Hyponatremiaclassification_listing, data=preMELD,
conf.type="log-log")
if(is.null(ci$surv) & is.null(ci$prev)) ci$surv <- 1-ci$pstate
print.ci.summary(ci=ci)
res <- with(preMELD, cuminc((DAYSWAIT_CHRON90/1), REM_CD_90,
Hyponatremiaclassification_listing, cencode=0, na.action = na.omit))
compevents <- levels(factor(preMELD$REM_CD_90))
quartz(width=7, height=7); par(lwd=1, las=1, family="sans", cex=1.25,
mgp=c(2.5,1,0))
nevents <- length(compevents)
if (compevents[1]=="0") {compevents <- compevents[2:nevents]; nevents <-
nevents - 1}
len <- nchar("Hyponatremiaclassification_listing")
groups <- substring(names(ci$strata), len+2)
ngroups <- length(groups)
legend <- groups
mar <- par("mar")
mar[1] <- mar[1] + length(ci$strata) + 0.5
mar[2] <- mar[2] + 2
par(mar=mar)
opar <- par(mar = mar)
on.exit(par(opar))
plot(ci[,2], bty="l", col=c("#E64B35FF", "#4DBBD5FF", "#00A087FF", "#3C5488FF", "#F39B7FFF", "#8491B4FF"), lty=1, lwd=2, ylim=c(0, 1), xlim=c(0,90),
xlab="Days from listing", ylab="Probability of waitlist mortality",
mark.time=TRUE)
xticks <- axTicks(1)
n.atrisk <- nrisk(ci[,1], xticks)
for (i in 1:length(ci$strata)){axis(1, at = xticks, labels = n.atrisk[i,],
line=3+i, tick = FALSE)}
for (i in 1:length(ci$strata)){mtext(groups[i], side=1,
at=-(xticks[2]-xticks[1])/2, line=4+i, cex=1.25)}
title(xlab = "Number at risk", line = 3.5, adj = 0)
legend("top", legend, ncol=3, box.lty=0, col=c("#E64B35FF", "#4DBBD5FF", "#00A087FF", "#3C5488FF", "#F39B7FFF", "#8491B4FF"), lty=1, lwd=3,
title="Sodium concentration at listing")
res$Tests
ci.summary.table <- summary.ci(ci=ci, res=res, event=1)
pairwise.gray.test(preMELD$DAYSWAIT_CHRON90, preMELD$REM_CD_90,
preMELD$Hyponatremiaclassification_listing, "preMELD",
p.adjust.method="bon", endpoint=1)
ci.summary.table
DummyEventForCI <- as.factor(DummyEventForCI)
#Fig 2b transplant
#####Cumulative incidence of competing events and Gray test#####
DummyEventForCI <- preMELD$REM_CD_90
#Required for Surv() with mstate option
res <- NULL
rm(list=ls())
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, fig.width = 10, fig.height = 12, results="asis")
# Chunk 2
library(ggplot2)
library(survminer)
library(survival)
library(dplyr)
library(tidyverse)
library(data.table)
library(forestmodel)
library(Hmisc)
library(sjPlot)
library(stargazer)
library(sjmisc)
library(arsenal)
library(gtsummary)
library(expss)
library(lubridate)
library(ggsignif)
library(smoothHR)
library(splines)
library(haven)
options(scipen=999)
# Chunk 3
#unosdata <- read_csv("/Users/Ivanics/Desktop/UNOSDATA.csv", guess_max = 300000)
#New
#unosdata <- read_sav("/Users/Ivanics/Desktop/Research/62. UNOS/Acuity circle policy/Raw file/Liver _STAR_June_2020_with_codes_AC_study.sav")
unosdata <- read_sas("/Users/Ivanics/Desktop/liver_data-2.sas7bdat")
View(unosdata)
